// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package api

import "fmt"
import "reflect"
import "encoding/json"

type CarsSeats int

var enumValues_CarsSeats = []interface{}{
	4,
	5,
	6,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CarsSeats) UnmarshalJSON(b []byte) error {
	var v int
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CarsSeats {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CarsSeats, v)
	}
	*j = CarsSeats(v)
	return nil
}

type Cars struct {
	// car UUID
	Id string `json:"id"`

	// car seats
	Seats CarsSeats `json:"seats"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Cars) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id: required")
	}
	if v, ok := raw["seats"]; !ok || v == nil {
		return fmt.Errorf("field seats: required")
	}
	type Plain Cars
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Cars(plain)
	return nil
}

// Schema definition to Initialize a fleet of cars
type CarsRqJson []Cars
